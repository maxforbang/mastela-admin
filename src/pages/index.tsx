import Head from "next/head";
import { useState } from "react";
import { Dialog } from "@headlessui/react";
import {
  BellIcon,
  XMarkIcon,
  XMarkIcon as XMarkIconOutline,
} from "@heroicons/react/24/outline";
import { api } from "~/utils/api";
import CodeInput from "~/components/CodeInput";
import clsx from "clsx";
import { UserButton, useUser } from "@clerk/nextjs";

// const navigation = [
//   // { name: "Home", href: "#" },
//   // { name: "Invoices", href: "#" },
//   // { name: "Clients", href: "#" },
//   // { name: "Expenses", href: "#" },
// ];

export default function Home() {
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const [currentProperty, setCurrentProperty] = useState("villa-encore");

  const { user } = useUser();

  return (
    <>
      <Head>
        <title>Admin | Mastela</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.png" />
      </Head>
      <>
        <header className="absolute inset-x-0 top-0 flex h-16 border-b border-gray-900/10">
          <div className="mx-auto flex w-full max-w-7xl items-center justify-between px-4 sm:px-6 lg:px-8">
            <div className="flex flex-1 items-center gap-x-6">
              {/* <button
                type="button"
                className="-m-3 p-3 md:hidden"
                onClick={() => setMobileMenuOpen(true)}
              >
                <span className="sr-only">Open main menu</span>
                <Bars3Icon
                  className="h-5 w-5 text-gray-900"
                  aria-hidden="true"
                />
              </button> */}
              <img
                className="h-8 w-auto"
                src="/Mastela-Logo.png"
                alt="Your Company"
              />
            </div>
            <nav className="hidden md:flex md:gap-x-11 md:text-sm md:font-semibold md:leading-6 md:text-gray-700">
              {/* {navigation.map((item, itemIdx) => (
                <a key={itemIdx} href={item.href}>
                  {item.name}
                </a>
              ))} */}
            </nav>
            <div className="flex flex-1 items-center justify-end gap-x-8">
              {/* <button
                type="button"
                className="-m-2.5 p-2.5 text-gray-400 hover:text-gray-500"
              >
                <span className="sr-only">View notifications</span>
                <BellIcon className="h-6 w-6" aria-hidden="true" />
              </button> */}
              <UserButton />
            </div>
          </div>
          <Dialog
            as="div"
            className="lg:hidden"
            open={mobileMenuOpen}
            onClose={setMobileMenuOpen}
          >
            <div className="fixed inset-0 z-50" />
            <Dialog.Panel className="fixed inset-y-0 left-0 z-50 w-full overflow-y-auto bg-white px-4 pb-6 sm:max-w-sm sm:px-6 sm:ring-1 sm:ring-gray-900/10">
              <div className="-ml-0.5 flex h-16 items-center gap-x-6">
                <button
                  type="button"
                  className="-m-2.5 p-2.5 text-gray-700"
                  onClick={() => setMobileMenuOpen(false)}
                >
                  <span className="sr-only">Close menu</span>
                  <XMarkIconOutline className="h-6 w-6" aria-hidden="true" />
                </button>
                <div className="-ml-0.5">
                  <a href="#" className="-m-1.5 block p-1.5">
                    <span className="sr-only">Your Company</span>
                    <img
                      className="h-8 w-auto"
                      src="https://tailwindui.com/img/logos/mark.svg?color=indigo&shade=600"
                      alt=""
                    />
                  </a>
                </div>
              </div>
              <div className="mt-2 space-y-2">
                {/* {navigation.map((item) => (
                  <a
                    key={item.name}
                    href={item.href}
                    className="-mx-3 block rounded-lg px-3 py-2 text-base font-semibold leading-7 text-gray-900 hover:bg-gray-50"
                  >
                    {item.name}
                  </a>
                ))} */}
              </div>
            </Dialog.Panel>
          </Dialog>
        </header>
        {user && user.id === "user_2TvNOuOZG0rZoJNG7eAkKHTC8Xz" ? (
          <main>
            <div className="mx-auto max-w-7xl px-4 py-16 sm:px-6 lg:px-8">
              <div className="mt-5">
                <div className="sm:hidden">
                  <label htmlFor="tabs" className="sr-only">
                    Select a tab
                  </label>
                  {/* Use an "onChange" listener to redirect the user to the selected tab URL. */}
                  <select
                    id="tabs"
                    name="tabs"
                    onChange={(e) =>
                      setCurrentProperty(
                        (state) =>
                          tabs.find((tab) => tab.name === e.target.value)
                            ?.slug ?? state
                      )
                    }
                    className="block w-full rounded-md border-gray-300 text-xl focus:border-indigo-500 focus:ring-indigo-500"
                    defaultValue={"Villa Encore"}
                  >
                    {tabs.map((tab) => (
                      <option key={tab.name}>{tab.name}</option>
                    ))}
                  </select>
                </div>
                <div className="hidden sm:block">
                  <nav
                    className="flex justify-center space-x-4"
                    aria-label="Tabs"
                  >
                    {tabs.map((tab) => (
                      <div
                        key={tab.name}
                        onClick={() => setCurrentProperty(tab.slug)}
                        className={clsx(
                          tab.slug === currentProperty
                            ? "pointer-events-none bg-gray-100 text-gray-700"
                            : "text-gray-500 hover:text-gray-700",
                          "cursor-pointer rounded-md px-3 py-2 text-sm font-medium"
                        )}
                        aria-current={
                          tab.slug === currentProperty ? "page" : undefined
                        }
                      >
                        {tab.name}
                      </div>
                    ))}
                  </nav>
                </div>
              </div>
              <div className="mt-10">
                <Table slug={currentProperty} />
              </div>
            </div>
          </main>
        ) : null}
      </>
    </>
  );
}

const tabs = [
  { name: "Villa Encore", slug: "villa-encore", current: false },
  { name: "The Twins Villa", slug: "the-twins-villa", current: false },
  { name: "Villa Aviator", slug: "villa-aviator", current: false },
  { name: "Maya Serenity", slug: "maya-serenity", current: true },
];

function Table({ slug }: { slug: string }) {
  const [inputIsOpen, setInputIsOpen] = useState(false);
  const [errorMsg, setErrorMsg] = useState("");

  const ctx = api.useContext();

  const { data: entryCodes = [] } =
    api.entryCode.getAllCodesForProperty.useQuery({ slug });

  const {
    mutate: deleteCode,
    isLoading,
    isError,
    error,
    isSuccess,
  } = api.entryCode.deleteCode.useMutation({
    onSuccess: () => {
      void ctx.entryCode.getAllCodesForProperty.invalidate();
    },
  });

  if (isError && errorMsg !== error.message) {
    setErrorMsg(error.message);
  } else if (isSuccess && errorMsg.length) {
    setErrorMsg("");
  }

  return (
    <div className="px-4 sm:px-6 lg:px-8">
      <div className="sm:flex sm:items-center">
        <div className="sm:flex-auto">
          <h1 className="text-base font-semibold leading-6 text-gray-900">
            {tabs.find((tab) => tab.slug === slug)?.name} Codes
          </h1>
          <p className="mt-2 text-sm text-gray-700">
            View, add, and delete codes for guests.
          </p>
        </div>
        <div className="mt-4 sm:ml-16 sm:mt-0 sm:flex-none">
          <button
            onClick={() => setInputIsOpen(true)}
            type="button"
            className="block rounded-md bg-sky-600 px-3 py-2 text-center text-sm font-semibold text-white shadow-sm hover:bg-sky-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
          >
            New Code
          </button>
        </div>
      </div>
      <CodeInput slug={slug} open={inputIsOpen} setOpen={setInputIsOpen} />
      {errorMsg.length !== 0 && (
        <p className="mt-8 w-full animate-pulse px-8 text-center text-rose-600">
          {errorMsg}
        </p>
      )}
      <div className="-mx-4 mt-10 ring-1 ring-gray-300 sm:mx-0 sm:rounded-lg">
        <table className="min-w-full divide-y divide-gray-300">
          <thead>
            <tr>
              <th
                scope="col"
                className="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6"
              >
                Name
              </th>
              <th
                scope="col"
                className="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
              >
                Code
              </th>
              <th scope="col" className="relative py-3.5 pl-3 pr-4 sm:pr-6">
                <span className="sr-only">Select</span>
              </th>
            </tr>
          </thead>
          <tbody>
            {entryCodes.map((entryCode, entryCodeIdx) => (
              <tr key={entryCode.id}>
                <td
                  className={clsx(
                    entryCodeIdx === 0 ? "" : "border-t border-transparent",
                    "relative py-4 pl-4 pr-3 text-sm sm:pl-6"
                  )}
                >
                  <div className="font-medium text-gray-900">
                    {entryCode.name}
                  </div>
                  {entryCodeIdx !== 0 ? (
                    <div className="absolute -top-px left-6 right-0 h-px bg-gray-200" />
                  ) : null}
                </td>
                <td
                  className={clsx(
                    entryCodeIdx === 0 ? "" : "border-t border-gray-200",
                    "px-3 py-3.5 text-sm text-gray-500"
                  )}
                >
                  <div>{entryCode.code}</div>
                </td>
                <td
                  className={clsx(
                    entryCodeIdx === 0 ? "" : "border-t border-transparent",
                    "relative py-3.5 pl-3 pr-4 text-right text-sm font-medium sm:pr-6"
                  )}
                >
                  <button
                    disabled={isLoading}
                    onClick={() =>
                      deleteCode({
                        codeId: entryCode.id,
                        slug,
                      })
                    }
                    type="button"
                    className="inline-flex items-center rounded-md border border-red-500 bg-red-50 px-2.5 py-1.5 text-sm font-semibold text-red-600 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-red-200 disabled:opacity-30 disabled:hover:bg-white"
                  >
                    {!isLoading && <XMarkIcon className="mr-1 h-5 w-5" />}{" "}
                    {isLoading ? "Loading" : "Delete"}
                    <span className="sr-only">, {entryCode.name}</span>
                  </button>
                  {entryCodeIdx !== 0 ? (
                    <div className="absolute -top-px left-0 right-6 h-px bg-gray-200" />
                  ) : null}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}

/*
  This example requires some changes to your config:
  
  ```
  // tailwind.config.js
  module.exports = {
    // ...
    plugins: [
      // ...
      require('@tailwindcss/forms'),
    ],
  }
  ```
*/
